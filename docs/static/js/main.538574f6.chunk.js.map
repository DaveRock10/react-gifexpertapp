{"version":3,"sources":["components/AddCategoria.js","helpers/getGifs.js","components/GifGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategoria","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categoriasActuales","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GiftGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","item","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAe,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAgB7C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAe,SAAAS,GAAkB,OAAMP,GAAN,mBAAqBO,QAM1D,SACI,uBACIC,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAIKI,MAAMF,GAJX,cAIbG,EAJa,gBAMEA,EAAUC,OANZ,uBAMZC,EANY,EAMZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAkBZM,GAlBY,4CAAH,sDCAPO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OAFAc,QAAQC,IAAIN,EAAIC,EAAOV,GAGnB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCLHS,EAAW,SAAC,GAAiB,IAAhBrB,EAAe,EAAfA,UAAe,ECDb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAK,GACLe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAmBtC,OAZAC,qBAAW,WAEP1B,EAASC,GACJ0B,MAAK,SAAAC,GACFH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAGtB,IAGIC,EDhBwBK,CAAa5B,GAAhCa,EAFyB,EAE9BN,KAAYe,EAFkB,EAElBA,QAEnB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDlB,IACnDsB,GAAW,mBAAGJ,UAAU,mCAAb,sBACZ,qBAAKA,UAAU,YAAf,SAIQL,EAAOJ,KAAK,SAAAC,GAAG,OAAI,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEgB9CkB,EA5BM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,kBAFvB,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KAKvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAcA,cAAgBA,IAC9B,uBAEA,6BAEQ6C,EAAWrB,KAAK,SAACsB,EAAMC,GAAP,OAEZ,cAAC,EAAD,CAEIhC,UAAW+B,GADNA,YCRlBE,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCEdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.538574f6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategoria = ({setCategorias}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const hanldeInputChange = (e) =>{\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const hanldeSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 0) {\r\n            setCategorias( categoriasActuales => [ inputValue, ...categoriasActuales] );\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={hanldeSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ hanldeInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategoria.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired\r\n};\r\n","\r\n\r\nexport const getGifs = async(categoria) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=JBOnOJ6gemfSZw1D678B316Cv6bm9DD3`;\r\n\r\n    const respuesta = await fetch(url);\r\n\r\n    const {data} = await respuesta.json();\r\n\r\n    const gifs = data.map( img => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n\r\n    });\r\n\r\n    return gifs;\r\n\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GiftGrid = ({categoria}) => {\r\n\r\n    const {data:images,loading}  = useFetchGifs(categoria);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ categoria }</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando</p>}\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                        \r\n                    images.map( img => <GifGridItem key={img.id} {...img} /> )\r\n                        \r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (categoria) =>{\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( ()=>{\r\n\r\n        getGifs( categoria )\r\n            .then(imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n    }, []);\r\n\r\n\r\n    return state;\r\n\r\n}","import React, {Fragment, useState} from 'react';\r\nimport { AddCategoria } from './components/AddCategoria';\r\nimport { GiftGrid } from './components/GiftGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState(['One Punch Man']);\r\n    \r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategoria setCategorias={ setCategorias }/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categorias.map( (item, index) => \r\n\r\n                        <GiftGrid \r\n                            key={item}\r\n                            categoria={item}\r\n                        />\r\n\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}